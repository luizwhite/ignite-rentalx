# This is a basic workflow to help you get started with Actions

name: CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  API_URL: "http://localhost:3333"
  FORGOT_MAIL_URL: "http://localhost:3333/password/reset?token="
  STORAGE_DRIVER: amazonS3
  MAIL_DRIVER: amazonSES
  AWS_REGION: sa-east-1
  AWS_S3_BUCKET_NAME: api-myown-rentx

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build API Artifact
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.5.1
        with:
          node-version: 16.x
      
      - name: Install Dependencies
        run: yarn
        
      - name: Build
        run: yarn build:babel

      - name: Copy Additional Files
        run: |
          cp docker-compose.yml dist
          cp package.json dist
          ls -A dist
        
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          # Artifact name
          name: artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: dist
  
  deploy-ec2:
    name: Deploy to Amazon EC2 Instance
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.0
        with:
          # Artifact name
          name: artifact
      
      - name: Create ENV File
        run: |
          touch .env
          echo "AWS_REGION=${{ env.AWS_REGION }}" >> .env
          echo "AWS_S3_BUCKET_NAME=${{ env.AWS_S3_BUCKET_NAME }}" >> .env
          echo "AWS_S3_ACCESS_KEY_ID=${{ secrets.AWS_S3_ACCESS_KEY_ID }}" >> .env
          echo "AWS_S3_SECRET_ACCESS_KEY=${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_SES_ACCESS_KEY_ID=${{ secrets.AWS_SES_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SES_SECRET_ACCESS_KEY=${{ secrets.AWS_SES_SECRET_ACCESS_KEY }}" >> .env
          echo "PSQL_PORT=${{ secrets.PSQL_PORT }}" >> .env
          echo "PSQL_PASSWORD='${{ secrets.PSQL_PASSWORD }}'" >> .env
          echo "API_URL=${{ env.API_URL }}" >> .env
          echo "FORGOT_MAIL_URL=${{ env.FORGOT_MAIL_URL }}" >> .env
          echo "STORAGE_DRIVER=${{ env.STORAGE_DRIVER }}" >> .env
          echo "MAIL_DRIVER=${{ env.MAIL_DRIVER }}" >> .env

      - name: Create ORM JSON
        id: create-json
        uses: jsdaniell/create-json@master
        with:
          name: "ormconfig.json"
          json: ${{ secrets.PQSL_CONFIG_JSON }}

      - name: List Files
        run: ls -A

      - name: SCP Files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          target: "/home/app/app/api-rentx"
          source: ".,.env"
          rm: true
      
